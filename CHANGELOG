v4.23B
-	bug fixes in divide
-	divide v4 working
-	sign bug fixes in power
-	sign bug fixes in sqroot

v4.23B
-	Negative functions
-	Abs functions
-	Additional init procs
-	Exception bug ifxes in Inc/Dec

v4.23C

v4.23D
-	?
-	sign bug fix in power v4.24
-	move UBool into separate unit.

v4.25
-	rename RAISE_EXCEPTIONS_ENABLED to Multi_Int_RAISE_EXCEPTIONS_ENABLED
-	make Multi_Int_RAISE_EXCEPTIONS_ENABLED a var instead of a define to allow
	better control of exceptions
-	Multi_Int_RAISE_EXCEPTIONS_ENABLED defaults to TRUE

v4.26
-	automagically detect and set {$define 64bit} or {$define 32bit}

v4.27
-	single word divisor optimisation from Warren/Knuth
-	inc(v1,increment), dec(v1, decrement)

v4.30
-	dynamic array inside Multi_Int_X48 record
-	Multi_Int_X48 size is now set at runtime
-	deal with Multi_Init_Initialisation not called or called more than once
-	Multi_Int to real overflow bug fixes (need replicating to all floats)
-	real-to-Multi-Int finished
-	single-to-Multi-Int finished
-	double-to-Multi-Int finished
-	bug fix in sqroot
-	bug fix in procedure ansistring_to_Multi_Int_X2
-	single-digit divisor bug fix in division routine
-	speed up Multi_Int_X48 multiply routine

v4.31
-	Rename Multi_Int_X48 to Multi_Int_XV
-	Rename assorted X48 stuff to XV
-	Make call Multi_Init_Initialisation optional with default value of 16
-	overflow bug fix in division routine
-	overflow bug in Multi_Int to single/double/real
-	overflow bug in 32bit Multi_Int to double/real
-	disable Multi_Int to single in 32bit environment
-	bug fix in hex to Multi_Int

v4.32.01
-	missing implicit conversion int64 to Multi_Int in 32bit environment
-	in all cases of overflow set Multi_Int_OVERFLOW_ERROR:=TRUE
-	set {$SAFEFPUEXCEPTIONS ON} in 32bit environments
-	re-instate Multi_int to single conversion in 32bit environment

v4.32.02
-	display compiler warning about lossy float to Multi_int conversion
-	add tests for hex conversion
-	Multi_Int_X3 hex conversion bug
-	Multi_Init_Initialisation improvements to make it easier to build test suites

v4.32.03
-	SINGLE_TYPE_PRECISION_DIGITS	= 7;
-	REAL_TYPE_PRECISION_DIGITS		= 15;
-	DOUBLE_TYPE_PRECISION_DIGITS	= 15;

v4.32.04
-	rename all INT_1W_S (etc) to MULTI_INT_1W_S (etc)
-	remove redundant Shift & Rotate procedures from record types

v4.32.05
-	exception not raised when div values same as last time
-	create method function FromHex(const v1:ansistring):Multi_Int;

v4.33.00
-	check and prevent Multi_Init_Initialisation if XV vars already exist
-	check invalidly resized XV vars
-	xor function was not checking overflow

v4.33.01
-	unary minus was not checking overflow
-	Multi_Int_XV xor function was not calling init
-	some shift operations did not have {$Q-} and {$R-}
-	To_Multi_Int_XV functions were not calling the Multi_Int_X_to_Multi_Int_XV proc

v4.34.00
-	new division algorithm - re-engineered knuth-warren  (Multi_Int_XV)

v4.34.01
-	new division algorithm for Multi_Int_X2 X3 X4
-	version const

v4.34.04
-	new division algorithm for Multi_Int_X4 required new Multi_Int_X5 for internal use only
-	new division algorithm for Multi_Int_XV required new Multi_Int_XW for internal use only

v4.34.05
-	bug fixes

v4.34.06
-	speed up multiplication routine - needed to get best out of new division algorithm

v4.34.07
-	small speed ups in new division algorithm

v4.34.08
-	UNFIXED Multi_Int_XV corruption bug in new division algorithm

v4.34.09
-	fix Multi_Int_XV corruption bug in new division algorithm

v4.34.10
-	reproduce fix for Multi_Int_XV corruption bug in new division algorithm to other types,
	even thought the other types did not manifest the bug. I did this to keep the code
	the same for the different data types.

v4.34.11
-	small speedups in multiplication routines.
-	bring UBool unit back inside from the cold.
-	testing bug fix in Multi_Int_X2 modulus functine
-	need extra initialisation routines reset_X2_Last_Divisor etc
-	bug fix in division algorithm

v4.34.12
-	major bug fix in division algorithm

v4.34.13
-	another bug fix in division algorithm
-	more reliable conversion from float types, by
	truncating the final digit instead of rounding.

v4.35.00
-	allow resizing of Multi_Int_XV type
-	allow different Multi_Int_XV vars to have different sizes
-	when a Multi_Int_XV operation value is larger than the operands,
	resize the result var to fit the value.

v4.35.01
-	impose limit on size of Multi_Int_XV vars

v4.35.02
-	lots of M_Value array indexing bugs fixed
-	result must not be set to 0 after failed call to Multi_Int_Reset_XV_Size
-	potential overflow bug in sqroot fixed
-	where internal M_Val array is used, result must be init := 0 in
	ansistring_to_Multi_Int_XV, hex_to_Multi_Int_XV, add_Multi_Int_XV,
	subtract_Multi_Int_XV and multiply_Multi_Int_XV
-	in Multi_Int_Set_XV_Limit check Multi_XV_Limit > Multi_Int_XV_size
-	exceptional case bug fix in division algorithm
-	lots undefined bug fixes in equals,less-than etc

v4.35.03
-	ToBin and FromBin functions
-	removed extended Inc operator (two-parameter version)
-	clean up hints, notes, warnings
-	exception overflow bug fix in add/subtract_Multi_Int_XV
-	more exception bug fixes

v4.35.04
-	re-instate function inlining with a switch
-	use function out parameters instead of var to eliminate warnings
-	define shr shl operators
-	serious bug fix in calling code for some operations var was being referenced
	instead of copied - for Multi_Int_XV only, others ok
-	implement shr and shl operators
-	hide ShiftDown & ShiftUp procedures
-	more var parameters changed to out

v4.36.00
-	now works in OBJFPC mode with ADVANCEDRECORDS switch

v4.37.00
-	Not And Or operations for Multi_Int_X2
-	Not And Or operations for Multi_Int_X3, X4, XV
-	Bug fix in XOR functions exception message
-	Bitwise functions raise exception for negative operands
-	Tidy-up/simplify overflow exception messages
-	Re-instate "lost" negative functions

v4.37.01
-	Bitwise functions no longer raise exceptions for negative operands

v4.37.02
-	Bug fixes in binary to decimal conversion
-	Bug fixes in Multi_Int_XV not and or
-	Remove conditionals to enable/disable overflow checking
-	Workaround for Range-Checking bug (hopefully temporary)

v4.37.03
-	Fix for bitshift bug

v4.37.04
-	inline "wrapper" functions & procedures
-	more bitshift bug fixes

v4.37.05
-	bug fixes: overflow flag was not set in many functions

v4.37.06
-	bug fix: in Multi_Init_Initialisation, "if (Multi_XV_size < 1)"
	should have been "if (Multi_XV_size <= 1)"

v4.38
-	1.	make remainder params optional in sqroot
-	2.	Fix typo "procedure Multi_Init_Initialisation"

v4.39
-	1.	major bug fix in div with single word dividor
-	2.	overflow bug fix in Multi_Int_Reset_XV_Size

v4.39X
-	1.	Xmental version - reinstate shift-and-sub-divide for testing
-	2.	lots of bug fixes for very large XV sizes

v4.40a
-	1.	remove shift-and-sub-divide
-	2.  replace Multi_Init_Initialisation_count with
		Multi_Init_Initialisation_done boolean;

v4.50
-	1.	probable bug in Multi_Int_XV_to_Multi_Int_XV
-	2.	tidying up
-	3.	allow only one call to Multi_Int_Initialisation REALLY DONE
-	4.	re-size a Multi_Int_XV can only be done in div procedure
-	5.	major bug fix in Multi_Int_X4_to_Multi_Int_XV
-	6.	TO DO - fix Multi_Int_X3_to_Multi_Int_XV, etc
-	7.	re-size a Multi_Int_XV can also be done sqroot procedure
-	8.	added sqroot function
-	9.	sqroot function uses Babylonian algorithm
-	10.	major bug fixes in new sqroot function

v4.60
-	1.	re-instate re-sizing of Multi_Int_XV vars
-	2.	another major bug fix in sqroot function
-	3.	replicate sqroot function bug fix to all instances

v4.61
-	1.	more bug fixes in Multi_Int_XV divide
