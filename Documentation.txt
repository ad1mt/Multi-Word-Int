Multi_int Library For Free Pascal.
==================================

Multi_int is a library that provides large integers for the Free Pascal compiler.

The large integer types are:

Multi_Int_X2    fixed 2 word integer  (in a 64bit environment = 128 bits)
Multi_Int_X3    fixed 3 word integer  (in a 64bit environment = 256 bits)
Multi_Int_X4    fixed 4 word integer  (in a 64bit environment = 512 bits)
Multi_Int_XV    user definable muliple word integer

The types Multi_Int_X2, Multi_Int_X3 and Multi_Int_X4 are provided for maximum speed.
Multi_Int_XV is user definable in size at run time. It has been tested up to 2048 words (= 16384 bits).

The following arithmetical operations are available:

add           +
subtract      -
multiply      *
divide        div
exclusive or  xor
modulo        mod
power         **
sqroot

All the usual comparison operators are available:
  =  <>  >  >=  <  <=

Conversion to/from other types is automatic/implicit, for the following types:
to/from integers
to/from real
from string is automatic
to string with "ToStr" method
to/from string in hex notation with ToHex and FromHex methods
to/from different large integer types with typecast functions To_Multi_Int_XV, To_Multi_Int_X4, To_Multi_Int_X3 and To_Multi_Int_X2

Other operations/functions:
Odd
Even
Defined
Overflow
SqRoot
Abs

If the SqRoot (square root) function cannot give an exact result, it rounds down, and gives a remainder.

The following constants are available (technically, these are actually variables calculated during initialisation):

Multi_Int_X2_MAXINT
Multi_Int_X3_MAXINT
Multi_Int_X4_MAXINT
Multi_Int_XV_MAXINT

There are two example/test programs included with the library code, to illustrate how the library can be used and fill in any gaps in this documentation.

Technical Notes
---------------
The code will only compile & work correctly in Delphi mode. The "advancedrecords" mode will not work correctly.

The code will compile in both 32bit and 64bit environments. In the Multi_Int.pas file there is a define "{$define 64bit}" or "{$define 32bit}" which is set depending on the environment, i.e. whether standard integers are 32bit or 64bit. This is set automatically to match the version of the compiler you are using, but can be overidden.

The Multi_Int unit exports a variable Multi_Int_RAISE_EXCEPTIONS_ENABLED, if set to TRUE, enables run-time exceptions to be generated. If set to FALSE, run-time exceptions will not be generated, but the Defined and Overload attributes will still be set and can be checked explicitly in the calling code.

By calling Multi_Init_Initialisation, you can set/change the size of the Multi_Int_XV type; this is the size in half-words. So, if you specify 128 half-words, which equals 64 whole words, which equals 4096 bits. Set this size to be the maximum you need for your application (with a small margin of error). The larger the size, the slower the calculations become.

The name old name for Multi_Int_XV was Multi_Int_X48; it was a hangover from earlier days.

The standard integer types have been aliased as follows, to make the coding easier in both 32bit and 64bit environments. Do not change these:
	Multi_int8u = byte;
	Multi_int8 = shortint;
	Multi_int16 = smallint;
	Multi_int16u = word;
	Multi_int32 = longint;
	Multi_int32u = longword;
	Multi_int64u = QWord;
	Multi_int64 = int64;

INT_1W_S, INT_1W_U, INT_2W_S, and INT_2W_U are aliased to the above types depending on whether "{$define 64bit}" or "{$define 32bit}" are defined. For example the following are defined for a 64bit environment. Do not change these:
	INT_1W_S = int32;
	INT_1W_U = int32u;
	INT_2W_S = int64;
	INT_2W_U = int64u;

The following functions/procedures are also available to calling code:

function Odd(const v1:Multi_Int_X2):boolean
function Even(const v1:Multi_Int_XV):boolean
function Abs(const v1:Multi_Int_XV):Multi_Int_X
procedure ShiftUp(var v1:Multi_Int_X2; NBits)
procedure ShiftDown(var v1:Multi_Int_X2; NBits)
procedure RotateUp(Var v1:Multi_Int_X2; NBits)
procedure RotateDown(Var v1:Multi_Int_X2; NBits)
function To_Multi_Int_XV(const v1:Multi_Int_X2):Multi_Int_XV
function To_Multi_Int_X4(const v1:Multi_Int_XV):Multi_Int_X4
function To_Multi_Int_X3(const v1:Multi_Int_X2):Multi_Int_X3
function To_Multi_Int_X2(const v1:Multi_Int_XV):Multi_Int_X2


The library code imports a unit named UBool to provide an exotic boolean types:
UBool = (UBool_UNDEF,UBool_FALSE,UBool_TRUE)
and T_UBool.
The main feature of the T_UBool and UBool types are to provide boolean variables that can have an additional value of "undefined".
These types implement methods and implicit conversion to/from standard boolean values.
